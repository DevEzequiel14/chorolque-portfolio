---
export interface Props {
    items: { title: string; description: string }[];
}
const { items } = Astro.props;
---

<section class="text-slider" set:html={""}>
    <h2 class="text-slider__heading">Lo que me gusta hacer</h2>
    <div class="text-slider__container" id="slider">
        {
            items.map((item) => (
                <article class="text-slider__slide">
                    <h3 class="text-slider__title">{item.title}</h3>
                    <p class="text-slider__description">{item.description}</p>
                </article>
            ))
        }
    </div>

    <nav class="text-slider__dots" aria-label="Selector de diapositivas">
        {
            items.map((_, index) => (
                <button
                    type="button"
                    class={`text-slider__dot ${index === 0 ? "active" : ""}`}
                    data-index={index}
                    aria-label={`Ir a slide ${index + 1}`}
                />
            ))
        }
    </nav>
</section>

<script is:inline>
    const slider = document.getElementById("slider");
    const dots = document.querySelectorAll(".text-slider__dot");
    let currentIndex = 0;
    let startX = 0;
    let isMoving = false;

    function goToSlide(index) {
        currentIndex = index;
        slider.style.transform = `translateX(-${index * 100}%)`;
        dots.forEach((dot, i) => dot.classList.toggle("active", i === index));
    }

    // Dots navigation
    dots.forEach((dot) => {
        dot.addEventListener("click", () => {
            goToSlide(parseInt(dot.dataset.index));
        });
    });

    // Touch events
    slider.addEventListener(
        "touchstart",
        (e) => {
            startX = e.touches[0].clientX;
            isMoving = false;
        },
        { passive: false },
    );

    slider.addEventListener(
        "touchmove",
        () => {
            isMoving = true;
        },
        { passive: false },
    );

    slider.addEventListener("touchend", (e) => {
        if (!isMoving) return;

        const endX = e.changedTouches[0].clientX;
        const diff = endX - startX;

        // Swipe derecha (hacia atrÃ¡s)
        if (diff > 50) {
            const newIndex = (currentIndex - 1 + dots.length) % dots.length;
            goToSlide(newIndex);
        }
        // Swipe izquierda (hacia adelante)
        else if (diff < -50) {
            const newIndex = (currentIndex + 1) % dots.length;
            goToSlide(newIndex);
        }
    });
</script>
